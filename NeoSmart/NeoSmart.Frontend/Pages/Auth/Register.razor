@page "/Register"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

@if (loading)
{
    <Loading />
}
else
{
    <EditForm Model="userDTO">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-6 justify-content-center m-auto">
                <div class="card justify-content-center">
                    <div class="card-header align-items-center w-auto">
                        <span>
                            <i class="oi oi-person" /> Registrarse
                            <button class="btn btn-sm btn-primary float-end" @onclick="CreteUserAsync"><i class="oi oi-check" /> Registrar</button>
                            <a class="btn btn-sm mx-1 btn-danger float-end" href="/"><i class="oi oi-ban" /> Cancelar</a>
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <div class="mb-3">
                                    <label>Nombres:</label>
                                    <div>
                                        <InputText class="form-control" @bind-Value="@userDTO.FirstName" />
                                        <ValidationMessage For="@(() => userDTO.FirstName)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Apellidos:</label>
                                    <div>
                                        <InputText class="form-control" @bind-Value="@userDTO.LastName" />
                                        <ValidationMessage For="@(() => userDTO.LastName)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Documento:</label>
                                    <div>
                                        <InputText class="form-control" @bind-Value="@userDTO.Document" />
                                        <ValidationMessage For="@(() => userDTO.Document)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Tipo:</label>
                                    <div>
                                        <select class="form-select" @bind="userDTO.DocumentTypeId">
                                            <option value="0">-- Seleccione un tipo de documento --</option>
                                            @if (documentTypes is not null)
                                            {
                                                @foreach (var documentType in documentTypes)
                                                {
                                                    <option value="@documentType.Id">@documentType.Description</option>
                                                }
                                            }
                                        </select>
                                        <ValidationMessage For="@(() => userDTO.DocumentTypeId)" />
                                    </div>
                                </div> 
                                <div class="mb-3">
                                    <label>Teléfono:</label>
                                    <div>
                                        <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                                        <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Dirección:</label>
                                    <div>
                                        <InputText class="form-control" @bind-Value="@userDTO.Address" />
                                        <ValidationMessage For="@(() => userDTO.Address)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Email:</label>
                                    <div>
                                        <InputText class="form-control" @bind-Value="@userDTO.Email" />
                                        <ValidationMessage For="@(() => userDTO.Email)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="mb-3">
                                    <label>País:</label>
                                    <div>
                                        <select class="form-select" @onchange="CountryChangedAsync">
                                            <option value="0">-- Seleccione un país --</option>
                                            @if (countries is not null)
                                            {
                                                @foreach (var country in countries)
                                                {
                                                    <option value="@country.Id">@country.Name</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Estado/Departamento:</label>
                                    <div>
                                        <select class="form-select" @onchange="StateChangedAsync">
                                            <option value="0">-- Seleccione un estado/departamento --</option>
                                            @if (states is not null)
                                            {
                                                @foreach (var state in states)
                                                {
                                                    <option value="@state.Id">@state.Name</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Ciudad:</label>
                                    <div>
                                        <select class="form-select" @bind="userDTO.CityId">
                                            <option value="0">-- Seleccione una ciudad --</option>
                                            @if (cities is not null)
                                            {
                                                @foreach (var city in cities)
                                                {
                                                    <option value="@city.Id">@city.Name</option>
                                                }
                                            }
                                        </select>
                                        <ValidationMessage For="@(() => userDTO.CityId)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Contraseña:</label>
                                    <div>
                                        <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                                        <ValidationMessage For="@(() => userDTO.Password)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Confirmación de contraseña:</label>
                                    <div>
                                        <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                                        <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private UserDTO userDTO = new();
    private List<DocumentType>? documentTypes;
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;
    private string? imageUrl;
    private bool loading;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentTypeAsync();
        await LoadCountriesAsync();

        if (!string.IsNullOrEmpty(userDTO.Photo))
        {
            imageUrl = userDTO.Photo;
            userDTO.Photo = null;
        }
    }

    private async Task CloseModalAsync()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }

    private void ImageSelected(string imagenBase64)
    {
        userDTO.Photo = imagenBase64;
        imageUrl = null;
    }

    private async Task LoadDocumentTypeAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<DocumentType>>("/api/DocumentTypes/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        documentTypes = responseHttp.Response;
        loading = false;
    }

    private async Task LoadCountriesAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<Country>>("/api/countries/combo");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
        loading = false;
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        await LoadStatesAsyn(selectedCountry);
        cities = null;
        userDTO.CityId = 0;
    }

    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.GetAsync<List<State>>($"/api/states/combo/{countryId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
    }

    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        await LoadCitiesAsyn(selectedState);
        userDTO.CityId = 0;
    }

    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.GetAsync<List<City>>($"/api/cities/combo/{stateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;
    }

    private async Task CreteUserAsync()
    {
        loading = true;
        userDTO.UserName = userDTO.Email;
        userDTO.UserTypes = new List<string>();
        if (IsAdmin)
        {
            userDTO.UserTypes.Add(UserType.Admin.ToString());
        }
        else
        {
            userDTO.UserTypes.Add(UserType.Employee.ToString()); ;
        }

        var responseHttp = await repository.PostAsync<UserDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        loading = false;
        await sweetAlertService.FireAsync("Confirmación", "Su cuenta ha sido creada con éxito. Se te ha enviado un correo electrónico con las instrucciones para activar tu usuario.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/");
    }
}
