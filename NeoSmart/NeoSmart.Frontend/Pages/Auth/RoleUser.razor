@page "/RoleUser/{UserName}"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if (loading == true)
{
    <Loading />
}
else
{
    <EditForm Model="userDTO" OnValidSubmit="SaveRoleUserAsync">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-12 justify-content-center m-auto">
                <div class="card justify-content-center">
                    <div class="card-header">
                        <span>
                            <i class="oi oi-person" /> Editar Roles Usuario
                            <button class="btn btn-sm btn-danger float-end me-1" @onclick="CloseModalAsync"><i class="oi oi-ban" /> Cerrar</button>
                            <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar Cambios</button>
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="row">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private UserDTO userDTO = null;
    private bool loading = false;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CloseModalAsync()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }

    private async Task SaveRoleUserAsync()
    {
        loading = true;
        userDTO.UserName = userDTO.Email;
        userDTO.UserTypes = new List<string>();
        // if (IsAdmin)
        // {
        //     userDTO.UserTypes.Add(UserType.Admin.ToString());
        // }
        // else
        // {
        userDTO.UserTypes.Add(UserType.Employee.ToString()); ;
        // }

        // var responseHttp = await repository.PostAsync<UserDTO>("/api/accounts/CreateUser", userDTO);
        // if (responseHttp.Error)
        // {
        //     loading = false;
        //     var message = await responseHttp.GetErrorMessageAsync();
        //     await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //     return;
        // }

        loading = false;
        await sweetAlertService.FireAsync("Confirmación", "Su cambios realizados con exito.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/users");
    }
}
