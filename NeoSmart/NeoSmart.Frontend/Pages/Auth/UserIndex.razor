@page "/users"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "SuperAdmin,Admin")]

@if (Users is null)
{
    <Loading />
}
else
{
    <GenericList MyList="Users">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-people"></i> Usuarios
                        @* <a class="btn btn-sm btn-primary float-end" href="/register/?IsAdmin=true"><i class="oi oi-plus"></i> Adicionar Admin</a> *@
                        <button class="btn btn-outline-primary float-start me-2" @onclick=@(() => ShowModalAsync(null))><i class="oi oi-plus"></i> Adicionar</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div class="col-3">
                            <input style="max-width: 300px;" type="text" class="form-control" id="titulo" placeholder="Buscar usuario..." @bind-value="Filter" />
                        </div>
                        <div class="col-2">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Imagén</th>
                                <th>Usuario</th>
                                <th>Documento</th>
                                <th>Teléfono</th>
                                <th>Email</th>
                                <th>Dirección</th>
                                <th>Confirmado</th>
                                <th>Empresa</th>
                                <th>Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>
                                        @if (!string.IsNullOrEmpty(@user.Photo))
                                        {
                                            <img src="@user.Photo" width="80" height="80" style="border-radius:50%" />
                                        }
                                        else
                                        {
                                            <img src="./img/ic_user.png" width="80" height="80" style="border-radius:50%" />
                                        }
                                        </td>
                                    <td>@user.FullName</td>
                                    <td>@user.Document</td>
                                    <td>@user.PhoneNumber</td>
                                    <td>@user.Email</td>
                                    <td>@user.Address, @user.City!.Name</td>
                                    <td>@user.EmailConfirmed</td>
                                    @if (@user.Company != null)
                                    {
                                        <td>@user.Company!.Name</td>
                                    }
                                    else
                                    {
                                        <td>NeoSmart</td>
                                    }
                                    <td>
                                        <button class="btn btn-warning btn-sm" @onclick=@(() => ShowModalAsync(@user.UserName, true))><i class="oi oi-pencil" /> Editar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPage" />
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    public List<User>? Users { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/accounts/all?page={page}";
            url2 = $"api/accounts/totalPages";
        }
        else
        {
            url1 = $"api/accounts/all?page={page}&filter={Filter}";
            url2 = $"api/accounts/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.GetAsync<List<User>>(url1);
            var responseHppt2 = await repository.GetAsync<int>(url2);
            Users = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ApplyFilterAsync()
    {
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await LoadAsync();
    }

    private async Task ShowModalAsync(string? userName, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<EditUser>(string.Empty, new ModalParameters().Add("UserName", userName));
        }
        else
        {
            modalReference = Modal.Show<RegisterUser>(string.Empty, new ModalParameters().Add("IsAdmin", true));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
}
