@page "/requests"
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Leader")]
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<div class="row mb-3">
    <div class="col-7">
        <button class="btn btn-outline-primary float-start me-2" @onclick=@(() => ShowModalAsync())><i class="oi oi-plus"></i> Adicionar</button>
        <h3>Solicitudes</h3>
    </div>
    <div class="col-5">
        <select class="form-select" @onchange="RequestStatusChangedAsync">
            <option value="0">-- Todos los estados --</option>
            @if (requestStatus is not null)
            {
                @foreach (var item in requestStatus)
                {
                    <option value="@item.Id">@item.Description</option>
                }
            }
        </select>
        <input style="max-width: 300px;" type="text" class="form-control float-start" id="titulo" placeholder="Buscar capacitación..." @bind-value="Filter" />
        <button type="button" class="btn btn-outline-primary float-end" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
        <button type="button" class="btn btn-outline-danger float-end" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
    </div>
</div>
@if (loading == true)
{
    <Loading />
}
else
{
    <div class="card widget-inline">
        <div class="card-body">
            <GenericList MyList="requests">
                <NoRecords>
                    <p>Aun no hay solicitudes registradas.</p>
                </NoRecords>
                <Body>
                    <table class="table table-responsive">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Líder</th>
                                <th>Solicitud</th>
                                <th>Duración</th>
                                <th>Interna</th>
                                <th>Estado</th>
                                <th>Habilitado</th>
                                <th style="width:220px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var request in requests!)
                            {
                                <tr>
                                    <td>@request.Id</td>
                                    <td>@request.UserLeader!.FullName</td>
                                    <td>@request.Description</td>
                                    <td>@request.Duration</td>
                                    <td><InputCheckbox @bind-Value=request.Type disabled="true"></InputCheckbox></td>
                                    <td>@request.RequestStatus!.Description</td>
                                    <td><InputCheckbox @bind-Value=request.Status disabled="true"></InputCheckbox></td>
                                    <td>
                                        @if (request.RequestStatus!.Name.Equals("Registered"))
                                        {
                                            <button class="btn btn-primary btn-sm mx-1" @onclick=@(() => ShowModalAsync(request.Id, true))>Edit</button>
                                        }

                                        @if (request.RequestStatus!.Name.Equals("Registered"))
                                        {
                                            <button class="btn btn-warning btn-sm mx-1" @onclick=@(() => ShowAuthorizedModalAsync(request.Id))>Autorizar</button>
                                        }

                                        @if (request.RequestStatus!.Name.Equals("Registered") || request.RequestStatus!.Name.Equals("Refused") || request.RequestStatus!.Name.Equals("Authorized"))
                                        {
                                            <button class="btn btn-success btn-sm mx-1" @onclick=@(() => ShowInfoModalAsync(request.Id))>Info</button>
                                        }

                                        @if (request.RequestStatus!.Name.Equals("Registered"))
                                        {
                                            <button class="btn btn-danger btn-sm mx-1" @onclick=@(() => DeleteAsync(request))>Borrar</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPageAsync" />
                </Body>
            </GenericList>

        </div>
    </div>
}

@code {
    private List<RequestStatus>? requestStatus;
    private int requestStatusId { get; set; } = 0;
    private List<Request>? requests;
    private int currentPage = 1;
    private int totalPages;
    private bool loading = false;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadrequestStatusAsync();
        await LoadAsync();
    }

    private async Task RequestStatusChangedAsync(ChangeEventArgs e)
    {
        var selectedrequestStatus = Convert.ToInt32(e.Value!);
        requestStatusId = selectedrequestStatus;
        await ApplyFilterAsync();
    }

    private async Task LoadrequestStatusAsync()
    {
        var responseHttp = await repository.GetAsync<List<RequestStatus>>("/api/RequestStatus/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        requestStatus = responseHttp.Response;
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (!isEdit)
        {
            modalReference = Modal.Show<RequestCreate>(string.Empty);
        }
        else
        {
            modalReference = Modal.Show<RequestEdit>(string.Empty, new ModalParameters().Add("requestId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task ShowInfoModalAsync(int id = 0)
    {
        IModalReference modalReference;
        modalReference = Modal.Show<RequestDetails>(string.Empty, new ModalParameters().Add("requestId", id));
        var result = await modalReference.Result;
        if (result.Confirmed)
        {

        }
    }

    private async Task ShowAuthorizedModalAsync(int id = 0)
    {
        IModalReference modalReference;
        modalReference = Modal.Show<RequestAuthorized>(string.Empty, new ModalParameters().Add("requestId", id));
        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/Requests/totalPages?Id={requestStatusId}";
        }
        else
        {
            url = $"api/Requests/totalPages?Id={requestStatusId}&filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        totalPages = response.Response;
        return true;
    }

    private async Task<bool> LoadListAsync(int page)
    {
        loading = true;
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/Requests?page={page}&id={requestStatusId}";
        }
        else
        {
            url = $"api/Requests?page={page}&id={requestStatusId}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<Request>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return false;
        }

        requests = response.Response;
        loading = false;
        return true;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task DeleteAsync(Request request)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar la solicitud: {request.Description}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"api/requests/{request.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
