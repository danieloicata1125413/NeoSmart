@page "/Request/details/{RequestId:int},{Return}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (loading)
{
    <Loading />
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col">
                    <h6 class="float-start">@Request!.Id</h6>
                    <a class="btn btn-danger btn-sm float-end me-1" href="/Requests"><i class="oi oi-ban" /> Cerrar</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>@Request!.Description</label>
                    </div>
                    <div class="mb-3">
                        <label>@Request!.Requirement</label>
                    </div>
                    <div class="mb-3">
                        <label><b>@Request!.Observation</b></label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    @if (!@Request.Type)
                    {
                        <div class="form-group mb-2">
                            <label class="control-label">Capacitación externa</label>
                        </div>
                        <div class="form-group mb-2">
                            <label class="control-label">Entidad: @Request.Entity</label>
                        </div>
                        <div class="form-group mb-2">
                            <label class="control-label">Precio: @Request.Price</label>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label>Capacitación interna</label>
                        </div>
                    }
                    <div class="mb-3">
                        <label>Fecha: @Request.DateStart.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture)</label>
                    </div>
                    <div class="mb-3">
                        <label>Duración: @Request.Duration</label>
                    </div>
                    <div class="mb-3">
                    </div>
                    <div class="mb-3">
                        <label>Estado: <b>@Request.RequestStatus!.Description</b></label>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<string>? topics = null;
    private List<string>? images = null;
    private bool loading = true;
    private Request? Request;
    private bool isAuthenticated;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int RequestId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadRequestAsync();
    }

    private async Task LoadRequestAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<Request>($"/api/Requests/{RequestId}");

        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Request = httpResponse.Response!;
        loading = false;
    }
}
