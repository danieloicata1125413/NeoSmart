@inject SweetAlertService sweetAlertService
@inject IRepository repository

@if (loading)
{
    <Loading />
}
else
{
    <NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col">
                        <h4 class="float-start">@Titulo</h4>
                        <button class="btn btn-danger float-end me-1" @onclick="ReturnAction"><i class="oi oi-ban" /> Cerrar</button>
                    </div>
                </div>
            </div>

            <div class="card-body m-2">

                <div class="row">
                    <div class="col-6 p-2">
                        <div class="row">
                            <div class="col-6 p-2">
                                <div class="form-group mb-2">
                                    <label>Fecha inicio:</label>
                                    <InputDate Type="InputDateType.Date" class="form-control float-end" style="max-width: 150px;" @bind-Value="@Session.DateStart" />
                                    @* <ValidationMessage For="@(() => @Session.DateStart)" /> *@
                                </div>
                            </div>
                            <div class="col-6 p-2">
                                <div class="form-group mb-2">
                                    <label>Fecha Fin:</label>
                                    <InputDate Type="InputDateType.Date" class="form-control float-end" style="max-width: 150px;" @bind-Value="@Session.DateEnd" />
                                    @* <ValidationMessage For="@(() => @Session.DateEnd)" /> *@
                                </div>
                            </div>
                            
                        </div>

                        <div class="form-group mb-2">
                            <label>Capacitador:</label>
                            <select class="form-select" @bind="Session.UserId">
                                <option value="0">-- Seleccione un capacitador --</option>
                                @if (users is not null)
                                {
                                    @foreach (var user in users)
                                    {
                                        if (Session.User != null)
                                        {
                                            <option value="@user.Id" selected="@(user.Id.Equals(Session.User!.Id))">@user.FullName</option>
                                        }
                                        else
                                        {
                                            <option value="@user.Id">@user.FullName</option>
                                        }
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => Session.UserId)" /> 
                        </div>
                    </div>
                    <div class="col-6 p-2">
                        <div class="mb-3">
                            <label>País:</label>
                            <div>
                                <select class="form-select" @onchange="CountryChangedAsync">
                                    <option value="0">-- Seleccione un país --</option>
                                    @if (countries is not null)
                                    {
                                        @foreach (var country in countries)
                                        {
                                            if (Session.City != null)
                                            {
                                                <option value="@country.Id" selected="@(country.Id == Session.City!.State!.Country!.Id)">@country.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@country.Id">@country.Name</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Estado/Departamento:</label>
                            <div>
                                <select class="form-select" @onchange="StateChangedAsync">
                                    <option value="0">-- Seleccione un estado/departamento --</option>
                                    @if (states is not null)
                                    {
                                        @foreach (var state in states)
                                        {
                                            if (Session.City != null)
                                            {
                                                <option value="@state.Id" selected="@(state.Id == Session.City!.State!.Id)">@state.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@state.Id">@state.Name</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Ciudad:</label>
                            <div>
                                <select class="form-select" @bind="Session.CityId">
                                    <option value="0">-- Seleccione una ciudad --</option>
                                    @if (cities is not null)
                                    {
                                        @foreach (var city in cities)
                                        {
                                            if (Session.City! != null)
                                            {
                                                <option value="@city.Id" selected="@(city.Id == Session.City!.Id)">@city.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@city.Id">@city.Name</option>
                                            }
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => Session.CityId)" />
                            </div>
                        </div>
                        
                            <div class="form-group mb-2">
                                <InputCheckbox @bind-Value=@TypeValue></InputCheckbox> <label class="control-label">Capacitación Virtual</label>
                            </div>
                        @if (TypeValue)
                        {
                            <div class="form-group mb-2">
                                <label class="control-label">Link:</label>
                                <InputTextArea class="form-control" @bind-Value="@Session.Link" />
                                <ValidationMessage For="@(() => Session.Link)" />
                            </div>
                        }
                        <div class="form-group mb-2">
                            <select class="form-select" @bind="@Session.SessionStatusId">
                                @* <option value="0">-- Seleccione un estado --</option> *@
                                @if (SessionStatus is not null)
                                {
                                    @foreach (var item in SessionStatus)
                                    {
                                        <option value="@item.Id">@item.Description</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => Session.SessionStatusId)" />
                        </div>
                        <div class="form-group mb-2">
                            <InputCheckbox @bind-Value=@StatusValue></InputCheckbox> <label class="control-label">Habilitado</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar</button>
            </div>
        </div>
    </EditForm>
}

@code {

    private EditContext editContext = null!;
    private List<User>? users { get; set; }
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;

    private bool loading = true;

    bool TypeValue
    {
        get => Convert.ToBoolean(Session.Type);
        set => Session.Type = value;
    }

    bool StatusValue
    {
        get => Convert.ToBoolean(Session.Status);
        set => Session.Status = value;
    }

    [EditorRequired]
    [Parameter]
    public string Titulo { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Session Session { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public List<SessionStatus>? SessionStatus { get; set; } = new();

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
        await LoadCountriesAsync();
        if (Session!.City != null)
        {
            await LoadStatesAsyn(Session!.City!.State!.Country!.Id);
            await LoadCitiesAsyn(Session!.City!.State!.Id);
        }
        editContext = new(Session);
    }

    private async Task LoadUsersAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<User>>("/api/accounts/all?page=1");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        users = responseHttp.Response!;
        loading = false;
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        states = null;
        cities = null;
        Session.CityId = 0;
        await LoadStatesAsyn(selectedCountry);
    }

    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        cities = null;
        Session.CityId = 0;
        await LoadCitiesAsyn(selectedState);
    }

    private async Task LoadCountriesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Country>>("/api/countries/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        countries = responseHttp.Response;
    }

    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.GetAsync<List<State>>($"/api/states/combo/{countryId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
    }

    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.GetAsync<List<City>>($"/api/cities/combo/{stateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

}
