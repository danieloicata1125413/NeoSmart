@inject SweetAlertService sweetAlertService
@inject IRepository repository

@if (loading)
{
    <Loading />
}
else
{
    <NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col">
                        <h4 class="float-start">@Titulo</h4>
                        <button class="btn btn-danger float-end me-1" @onclick="ReturnAction"><i class="oi oi-ban" /> Cerrar</button>
                    </div>
                </div>
            </div>

            <div class="card-body m-2">

                <div class="row">
                    <div class="col-6 p-2">
                        <div class="form-group mb-2">
                            <select class="form-select" @bind="@Session.TrainingId">
                                <option value="0">-- Seleccione un capacitación --</option>
                                @if (trainings is not null)
                                {
                                    @foreach (var item in trainings)
                                    {
                                        <option value="@item.Id">@item.Description</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => Session.TrainingId)" />
                        </div>

                        <div class="form-group mb-2">
                            <label>Fecha:</label>
                            <InputDate Type="InputDateType.Date" class="form-control float-end" @bind-Value="@Session.DateStart" />
                            <ValidationMessage For="@(() => @Session.DateStart)" />
                        </div>

                        <div class="form-group mb-2">
                            <label>Capacitador:</label>
                            <select class="form-select" @bind="Session.UserId">
                                <option value="0">-- Seleccione un capacitador --</option>
                                @if (users is not null)
                                {
                                    @foreach (var user in users)
                                    {
                                        if (Session.User != null)
                                        {
                                            <option value="@user.Id" selected="@(user.Id.Equals(Session.User!.Id))">@user.FullName</option>
                                        }
                                        else
                                        {
                                            <option value="@user.Id">@user.FullName</option>
                                        }
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => Session.UserId)" />
                        </div>
                    </div>
                    <div class="col-6 p-2">
                        <div class="form-group mb-2">
                            <InputCheckbox @bind-Value=@TypeValue></InputCheckbox> <label class="control-label">Capacitación Virtual</label>
                        </div>
                        @if (TypeValue)
                        {
                            <div class="form-group mb-2">
                                <label class="control-label">Link:</label>
                                <InputTextArea class="form-control" @bind-Value="@Session.Link" />
                                <ValidationMessage For="@(() => Session.Link)" />
                            </div>
                        }

                        <div class="form-group mb-2">
                            <select class="form-select" @bind="@Session.SessionStatusId">
                                <option value="0">-- Seleccione un estado --</option>
                                @if (SessionStatus is not null)
                                {
                                    @foreach (var item in SessionStatus)
                                    {
                                        <option value="@item.Id">@item.Description</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => Session.SessionStatusId)" />
                        </div>

                        <div class="form-group mb-2">
                            <InputCheckbox @bind-Value=@StatusValue></InputCheckbox> <label class="control-label">Habilitado</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar</button>
            </div>
        </div>
    </EditForm>
}

@code {

    private EditContext editContext = null!;
    private List<User>? users { get; set; }
    private List<Training>? trainings;

    private bool loading = true;

    bool TypeValue
    {
        get => Convert.ToBoolean(Session.Type);
        set => Session.Type = value;
    }

    bool StatusValue
    {
        get => Convert.ToBoolean(Session.Status);
        set => Session.Status = value;
    }

    [EditorRequired]
    [Parameter]
    public string Titulo { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Session Session { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public List<SessionStatus>? SessionStatus { get; set; } = new();

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
        await LoadTrainingsAsync();
        editContext = new(Session);
    }

    private async Task LoadUsersAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<User>>("/api/accounts/all?page=1");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        users = responseHttp.Response!;
        loading = false;
    }

    private async Task LoadTrainingsAsync()
    {
        var responseHttp = await repository.GetAsync<List<Training>>("/api/Trainings/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        trainings = responseHttp.Response;
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

}
