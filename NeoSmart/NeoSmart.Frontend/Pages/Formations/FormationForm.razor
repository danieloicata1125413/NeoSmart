@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>
<EditForm EditContext="editContext" OnValidSubmit="OnDataAnnotationsValidatedAsync">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col">
                    <h4 class="float-start">@Titulo</h4>
                    <button class="btn btn-danger float-end me-1" @onclick="ReturnAction"><i class="oi oi-ban" /> Cerrar</button>
                </div>
            </div>
            <ul class="nav nav-tabs card-header-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="Formation-tab" data-bs-toggle="tab" data-bs-target="#Formation" type="button" role="tab" aria-controls="Formation" aria-selected="true">Formación</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="FormationTopics-tab" data-bs-toggle="tab" data-bs-target="#FormationTopics" type="button" role="tab" aria-controls="FormationTopics" aria-selected="false">Temas</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="FormationOccupations-tab" data-bs-toggle="tab" data-bs-target="#FormationOccupations" type="button" role="tab" aria-controls="FormationOccupations" aria-selected="false">Cargos</button>
                </li>
            </ul>
        </div>
        <div class="card-body m-2">
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="Formation" role="tabpanel" aria-labelledby="Formation-tab">
                    <div class="row">
                        <div class="col-6 p-2">
                            <div class="form-group mb-2">
                                <label class="control-label">Código:</label>
                                <InputText class="form-control" @bind-Value="@FormationDTO.Cod" />
                                <ValidationMessage For="@(() => FormationDTO.Cod)" />
                            </div>
                            <div class="form-group mb-2">
                                <label class="control-label">Descripción:</label>
                                <InputTextArea class="form-control" @bind-Value="@FormationDTO.Description" />
                                <ValidationMessage For="@(() => FormationDTO.Description)" />
                                <InputCheckbox @bind-Value=@StatusValue></InputCheckbox> <label class="control-label">Habilitado</label>
                            </div>
                        </div>
                        <div class="col-6 p-2">
                            <div class="form-group mb-2">
                                <label>Empresa:</label>
                                <select class="form-select" @bind="FormationDTO.CompanyId">
                                    <option value="0">-- Seleccione una empresa --</option>
                                    @if (companies is not null)
                                    {
                                        @foreach (var company in companies)
                                        {
                                            if (FormationDTO.CompanyId != 0)
                                            {
                                                <option value="@company.Id" selected="@(company.Id == FormationDTO.CompanyId)">@company.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@company.Id">@company.Name</option>
                                            }
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => FormationDTO.CompanyId)" />
                            </div>

                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="FormationTopics" role="tabpanel" aria-labelledby="FormationTopics-tab">
                    <div class="col-12 p-2">
                        <MultipleSelector NonSelected="selectedTopics" Selected="nonSelectedTopics" />
                    </div>
                </div>
                <div class="tab-pane fade" id="FormationOccupations" role="tabpanel" aria-labelledby="FormationOccupations-tab">
                    <div class="col-12 p-2">
                        <MultipleSelector NonSelected="nonSelectedOccupations" Selected="selectedOccupations" />
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary" type="submit">Guardar</button>
        </div>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;
    private List<Company>? companies;
    private List<Occupation>? occupations;
    private List<MultipleSelectorModel> selectedTopics { get; set; } = new();
    private List<MultipleSelectorModel> nonSelectedTopics { get; set; } = new();
    private List<MultipleSelectorModel> selectedOccupations { get; set; } = new();
    private List<MultipleSelectorModel> nonSelectedOccupations { get; set; } = new();
    private bool loading;
    bool StatusValue
    {
        get => Convert.ToBoolean(FormationDTO.Status);
        set => FormationDTO.Status = value;
    }
    [EditorRequired]
    [Parameter]
    public string Titulo { get; set; } = null!;

    [Parameter]
    public bool IsEdit { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public FormationDTO FormationDTO { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    public List<Topic> SelectedTopics { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<Topic> NonSelectedTopics { get; set; } = new();

    [Parameter]
    public List<Occupation> SelectedOccupations { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<Occupation> NonSelectedOccupations { get; set; } = new();

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCompaniesAsync();
        editContext = new(FormationDTO);
        selectedTopics = SelectedTopics.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Description)).ToList();
        nonSelectedTopics = NonSelectedTopics.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Description)).ToList();
        selectedOccupations = SelectedOccupations.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Description)).ToList();
        nonSelectedOccupations = NonSelectedOccupations.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Description)).ToList();
    }

    private async Task LoadCompaniesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Company>>("/api/companies/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        companies = responseHttp.Response;
    }

    private async Task OnDataAnnotationsValidatedAsync()
    {
        FormationDTO.FormationTopicIds = selectedTopics.Select(x => int.Parse(x.Key)).ToList();
        FormationDTO.FormationOccupationIds = selectedOccupations.Select(x => int.Parse(x.Key)).ToList();
        await OnValidSubmit.InvokeAsync();
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

}
