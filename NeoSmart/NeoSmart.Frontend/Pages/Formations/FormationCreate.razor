@page "/formations/create"
@attribute [Authorize(Roles = "SuperAdmin,Admin")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

@if (loading)
{
    <Loading />
}
else
{
    <FormationForm Titulo="Nuevo Entrenamiento" @ref="formationForm"
                   FormationDTO="formationDTO"
                   SelectedTopics="selectedTopics"
                   NonSelectedTopics="nonSelectedTopics"
                   SelectedOccupations="selectedOccupations"
                   NonSelectedOccupations="nonSelectedOccupations"
                   OnValidSubmit="CreateAsync"
                   ReturnAction="Return"
                   IsEdit=false />
}

@code {

    private FormationDTO formationDTO = new()
        {
            FormationTopicIds = new List<int>(),
            FormationOccupationIds = new List<int>(),
            Status = true
        };
    private FormationForm? formationForm;
    private List<Topic> selectedTopics = new();
    private List<Topic> nonSelectedTopics = new();
    private List<Occupation> selectedOccupations = new();
    private List<Occupation> nonSelectedOccupations = new();
    private bool loading = true;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await LoadTopicsAsync();
        await LoadOccupationsAsync();
    }

    private async Task LoadTopicsAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<List<Topic>>("/api/topics");
        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        nonSelectedTopics = httpResponse.Response!;
        loading = false;
    }

    private async Task LoadOccupationsAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<List<Occupation>>($"/api/Occupations");
        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        nonSelectedOccupations = httpResponse.Response!;
        loading = false;
    }

    private async Task CreateAsync()
    {
        var response = await repository.PostAsync("/api/formations/full", formationDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito.");
    }

    private void Return()
    {
        formationForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/formations");
    }
}
