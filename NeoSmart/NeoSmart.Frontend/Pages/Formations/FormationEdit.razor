@page "/formations/edit/{formationId:int}"
@attribute [Authorize(Roles = "SuperAdmin,Admin")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

@if (loading)
{
    <Loading />
}
else
{
    <FormationForm Titulo="Editar Entrenamiento" @ref="formationForm"
                   FormationDTO="formationDTO"
                   SelectedTopics="selectedTopics"
                   NonSelectedTopics="nonSelectedTopics"
                   SelectedOccupations="selectedOccupations"
                   NonSelectedOccupations="nonSelectedOccupations"
                   OnValidSubmit="SaveAsync" ReturnAction="Return" IsEdit=true />
}

@code {
    private Formation? formation;
    private FormationDTO? formationDTO = new FormationDTO()
        {
            FormationTopicIds = new List<int>()
        };
    private FormationForm? formationForm;
    private List<Topic> selectedTopics = new();
    private List<Topic> nonSelectedTopics = new();
    private List<Occupation> selectedOccupations = new();
    private List<Occupation> nonSelectedOccupations = new();
    private bool loading = true;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int formationId { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await LoadFormationSync();
        await LoadTopicsAsync();
        await LoadOccupationsAsync();
    }

    private async Task LoadFormationSync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<Formation>($"/api/formations/{formationId}");
        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        formation = httpResponse.Response!;
        formationDTO = ToFormationDTO(formation);
        loading = false;
    }

    private async Task LoadOccupationsAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<List<Occupation>>($"/api/Occupations/ComboByCompany/{formationDTO.CompanyId}");
        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var occupations = httpResponse.Response!;
        foreach (var occupation in occupations!)
        {
            var found = formation!.FormationOccupations!.FirstOrDefault(x => x.OccupationId == occupation.Id);
            if (found == null)
            {
                nonSelectedOccupations.Add(occupation);
            }
            else
            {
                selectedOccupations.Add(occupation);
            }
        }
        loading = false;
    }

    private FormationDTO ToFormationDTO(Formation formation)
    {
        return new FormationDTO
            {
                Id = formation.Id,
                CompanyId = formation.CompanyId,
                Company = formation.Company,
                Cod = formation.Cod,
                Description = formation.Description,
                Status = formation.Status,
                FormationTopicIds = formation.FormationTopics!.Select(x => x.TopicId).ToList(),
                FormationOccupationIds = formation.FormationOccupations!.Select(x => x.OccupationId).ToList(),
            };
    }

    private async Task LoadTopicsAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<List<Topic>>($"/api/topics/combo/{formationDTO.CompanyId}");

        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var topics = httpResponse.Response!;
        foreach (var topic in topics!)
        {
            var found = formation!.FormationTopics!.FirstOrDefault(x => x.TopicId == topic.Id);
            if (found == null)
            {
                nonSelectedTopics.Add(topic);
            }
            else
            {
                selectedTopics.Add(topic);
            }
        }
        loading = false;
    }

    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"/api/formations/full", formationDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    private void Return()
    {
        formationForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/formations");
    }
}