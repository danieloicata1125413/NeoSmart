@page "/TrainingSession/create/{TrainingId:int}"
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Leader,Trainer")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService


<TrainingSessionForm Titulo="Nueva Sessión"
                      @ref="trainingSessionForm"
                      TrainingSession="trainingSession"
                      OnValidSubmit="CreateAsync" 
                      ReturnAction="Return" />

@code {

    private TrainingSession trainingSession = new()
        {
            
            DateStart = DateTime.Now,
            DateEnd = DateTime.Now.AddDays(1),
            TrainingId = 1,
            CityId = 0,
            Type = false,
            Status = true
        };
    private TrainingSessionForm? trainingSessionForm;

    [Parameter]
    public int TrainingId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CreateAsync()
    {
        trainingSession.TrainingId = TrainingId;
        var response = await repository.PostAsync("/api/TrainingSessions", trainingSession);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito.");
    }

    private void Return()
    {
        trainingSessionForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/TrainingSessions/details/{TrainingId}");
    }

}
