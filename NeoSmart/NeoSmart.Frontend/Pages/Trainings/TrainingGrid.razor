@page "/Grid"
@attribute [Authorize]
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<style type="text/css">
    .card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid lightgray;
        box-shadow: 2px 2px 8px 4px #d3d3d3d1;
        border-radius: 10px;
        font-family: sans-serif;
        margin: 5px;
    }
</style>

@if (trainings is null)
{
    <Loading />
}
else
{

    <div class="row mb-3">
        <div class="col-7">
            <h3>Capacitaciones</h3>
            <AuthorizeView>
                <Authorized>
                    @if (counter > 0)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick=@(() => ShowCartAsync())> Ver solicitud: (@counter)</button>
                    }
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="col-5">
            <input style="max-width: 300px;" type="text" class="form-control float-start" id="titulo" placeholder="Buscar capacitación..." @bind-value="Filter" />
            <button type="button" class="btn btn-outline-primary float-end" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
            <button type="button" class="btn btn-outline-danger float-end" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
        </div>
    </div>

    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />

    <div class="row row-cols-1 row-cols-md-4 g-2 mt-1 mb-3">
        @if (trainings is not null)
        {
            @foreach (var training in trainings!)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="text-center zoom">
                            <CarouselView Images="@training!.MainImages" />
                            @* <img src="@training.MainImage" style="height:200px; max-width:200px;" class="text-center" alt=@training.Description /> *@
                        </div>
                        <div class="card-body">
                            <h6 class="card-title text-navy"> @training.Description</h6>
                            @* <p class="card-text smfnt">@training.Process!.Description</p> *@
                            <div class="form-group mb-2">
                                <p class="text-muted">@training.Duration min</p>
                            </div>
                            <div class="form-group mb-2">
                                <MudRating SelectedValue="4" />
                            </div>
                            @if (training!.Sessions != null)
                            {
                            <div class="form-group mb-2">
                                <p>Agenda:</p>
                                @foreach (var trainingSession in training!.Sessions!)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <p class="float-start">@trainingSession.DateStart.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture)</p>
                                            <button class="btn btn-sm btn-outline-primary mb-2 float-end" @onclick=@(() => AddToCartAsync(trainingSession.Id))><i class="oi oi-plus" /> Add</button>
                                        </div>
                                    </div>
                                }
                            </div>
                            }
                        </div>
                        <div class="card-footer text-center">
                            <button class="btn btn-sm btn-outline-secondary" @onclick=@(() => ShowDetailsAsync(training.Id))><i class="oi oi-info" /> Detalles</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}

@code {
    private int currentPage = 1;
    private int totalPages;
    private int counter = 0;
    private bool isAuthenticated;

    public List<Training>? trainings { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnParametersSetAsync()
    {
        await CheckIsAuthenticatedAsync();
        await LoadTemporalInscriptionCounterAsync();
    }

    private async Task CheckIsAuthenticatedAsync()
    {
        var authenticationState = await authenticationStateTask;
        isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    }

    private async Task LoadTemporalInscriptionCounterAsync()
    {
        if (!isAuthenticated)
        {
            return;
        }

        var responseHttp = await repository.GetAsync<int>("/api/SessionInscriptionTemporals/count");
        if (responseHttp.Error)
        {
            return;
        }
        counter = responseHttp.Response;
    }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/trainings?page={page}&RecordsNumber=8";
            url2 = $"api/trainings/totalPages/?RecordsNumber=8";
        }
        else
        {
            url1 = $"api/trainings?page={page}&filter={Filter}&RecordsNumber=8";
            url2 = $"api/trainings/totalPages?filter={Filter}&RecordsNumber=8";
        }

        try
        {
            var responseHppt = await repository.GetAsync<List<Training>>(url1);
            var responseHppt2 = await repository.GetAsync<int>(url2);
            trainings = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task ShowDetailsAsync(int id)
    {
        IModalReference modalReference;
        modalReference = Modal.Show<TrainingDetails>(string.Empty, new ModalParameters().Add("TrainingId", id));
        await modalReference.Result;
    }

    private async Task AddToCartAsync(int trainingSessionId)
    {
        if (!isAuthenticated)
        {
            var modalReference = Modal.Show<Login>();
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.BottomEnd,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debes haber iniciado sesión para poder agregar sesiones de capacitaciones a tu solicitud.");
            return;
        }

        var sessionInscriptionTemporalDTO = new SessionInscriptionTemporalDTO
            {
                SessionId = trainingSessionId
            };

        var httpResponse = await repository.PostAsync("/api/SessionInscriptionTemporals/full", sessionInscriptionTemporalDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadTemporalInscriptionCounterAsync();
        var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Sesión de capacitación programada agregada al tus solicitudes.");
    }

    private async Task ShowCartAsync()
    {
        IModalReference modalReference;
        modalReference = Modal.Show<ShowCart>(string.Empty);
        await modalReference.Result;
    }
}
