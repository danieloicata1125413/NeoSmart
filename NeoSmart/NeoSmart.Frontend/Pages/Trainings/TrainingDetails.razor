@page "/training/details/{TrainingId:int},{Return}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (loading)
{
    <Loading />
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col">
                    <h6 class="float-start">@training!.Id</h6>
                    <a class="btn btn-danger btn-sm float-end me-1" href="@Return"><i class="oi oi-ban" /> Cerrar</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    @if (images is not null)
                    {
                        <CarouselView Images="images" />
                    }
                    <MudRating SelectedValue="4" />
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>@training.Description</label>
                    </div>
                    <div class="mb-3">
                        <label>@training.Requirement</label>
                    </div>
                    <div class="mb-3">
                        <label><b>@training.Observation</b></label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    @if (!@training.Type)
                    {
                        <div class="form-group mb-2">
                            <label class="control-label">Capacitación externa</label>
                        </div>
                        <div class="form-group mb-2">
                            <label class="control-label">Entidad: @training.Entity</label>
                        </div>
                        <div class="form-group mb-2">
                            <label class="control-label">Precio: @training.Price</label>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label>Capacitación interna</label>
                        </div>
                    }
                    <div class="mb-3">
                        <label>Fecha: @training.DateStart.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture)</label>
                    </div>
                    <div class="mb-3">
                        <label>Duración: @training.Duration</label>
                    </div>
                    <div class="mb-3">
                    </div>
                    <div class="mb-3">
                        <label>Estado: <b>@training.TrainingStatus!.Description</b></label>
                    </div>
                    @if (topics is not null)
                    {
                        @if (training!.Sessions!.Count > 0)
                        {
                            <div class="mb-3">
                                <label><b>Temas relacionados:</b></label>
                            </div>
                            @foreach (var topic in topics!)
                            {
                                <div class="mb-3">
                                    <label>@topic</label>
                                </div>
                            }
                        }
                    }

                </div>
                <div class="col-6">
                    <div class="form-group mb-2">
                        @if (training!.Sessions!.Count > 0)
                        {
                            <div class="mb-3">
                                <label><b>Agenda disponible:</b></label>
                            </div>

                            @foreach (var session in training!.Sessions!)
                            {
                                <div class="mb-3" style="background-color: #f1f1f1; padding: 5px;">
                                    <div class="mb-3">
                                        <label>Capacitador: @session!.ExistUser</label>
                                    </div>
                                    <div class="mb-3">
                                        <label>Ciudad: @session.City!.Name</label>
                                    </div>
                                    <div class="mb-3">
                                        <label>Fecha: @session.DateStart.ToString("dd-MM-yyyy", CultureInfo.InvariantCulture) Horario: @session.TimeStart - @session.TimeEnd</label>
                                    </div>
                                    <div class="mb-3">
                                        <label>Inscritos: @session!.TrainingSessionInscriptionsNumber</label>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<string>? topics = null;
    private List<string>? images = null;
    private bool loading = true;
    private Training? training;
    private bool isAuthenticated;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int TrainingId { get; set; }
    [Parameter]
    public string Return { get; set; } = "Grid";

    public TrainingSessionInscriptionDTO trainingSessionInscriptionDTO { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await LoadTrainingAsync();
    }

    private async Task LoadTrainingAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<Training>($"/api/trainings/{TrainingId}");

        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        training = httpResponse.Response!;
        if (training.TrainingTopics != null)
        {
            topics = training.TrainingTopics!.Select(x => x.Topic!.Description).ToList();
        }
        if (training.TrainingImages != null)
        {
            images = training.TrainingImages!.Select(x => x.Image).ToList();
            if (images!.Count() == 0)
            {
                if (training.MainImage != null)
                {
                    images!.Add(training.MainImage);
                }
            }
        }

        loading = false;
    }
}
