@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>
<EditForm EditContext="editContext" OnValidSubmit="OnDataAnnotationsValidatedAsync">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col">
                    <h4 class="float-start">@Titulo</h4>
                    <button class="btn btn-danger float-end me-1" @onclick="ReturnAction"><i class="oi oi-ban" /> Cerrar</button>
                </div>
            </div>
            <ul class="nav nav-tabs card-header-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="Training-tab" data-bs-toggle="tab" data-bs-target="#Training" type="button" role="tab" aria-controls="Training" aria-selected="true">Capacitación</button>
                </li>
                 @if (!IsReadOnly)
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="TrainingTopics-tab" data-bs-toggle="tab" data-bs-target="#TrainingTopics" type="button" role="tab" aria-controls="TrainingTopics" aria-selected="false">Temas</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="TrainingImages-tab" data-bs-toggle="tab" data-bs-target="#TrainingImages" type="button" role="tab" aria-controls="TrainingImages" aria-selected="false">Imágenes</button>
                </li>
                }
            </ul>
        </div>
        <div class="card-body m-2">
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="Training" role="tabpanel" aria-labelledby="Training-tab">
                    <div class="row">
                        <div class="col-6 p-2">
                            <div class="form-group mb-2">
                                <label>Empresa:</label>
                                <select class="form-select" @onchange="CompanyChangedAsync" disabled="@IsReadOnly">
                                    <option value="0">-- Seleccione una empresa --</option>
                                    @if (companies is not null)
                                    {
                                        @foreach (var company in companies)
                                        {
                                            if (TrainingDTO.Process is not null)
                                            {
                                                <option value="@company.Id" selected="@(company.Id == TrainingDTO.Process!.Company!.Id)">@company.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@company.Id">@company.Name</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                            <div class="form-group mb-2">
                                <label>Proceso:</label>
                                <select class="form-select" @bind="TrainingDTO.ProcessId" disabled="@IsReadOnly">
                                    <option value="0">-- Seleccione un proceso --</option>
                                    @if (processes is not null)
                                    {
                                        @foreach (var process in processes)
                                        {
                                            if (TrainingDTO.Process is not null)
                                            {
                                                <option value="@process.Id" selected="@(process.Id == TrainingDTO.Process!.Id)">@process.Description</option>
                                            }
                                            else
                                            {
                                                <option value="@process.Id">@process.Description</option>
                                            }
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => TrainingDTO.ProcessId)" />
                            </div>
                            <div class="form-group mb-2">
                                <select class="form-select" @bind="@TrainingDTO.TrainingStatusId">
                                    @* <option value="0">-- Seleccione un estado --</option> *@
                                    @if (TrainingStatus is not null)
                                    {
                                        @foreach (var item in TrainingStatus)
                                        {
                                            <option value="@item.Id">@item.Description</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => TrainingDTO.TrainingStatusId)" />
                            </div>

                            <div class="form-group mb-2">
                                <label>Fecha inicio:</label>
                                <InputDate Type="InputDateType.Date" class="form-control float-end" @bind-Value="@TrainingDTO.DateStart" disabled="@IsReadOnly" />
                                <ValidationMessage For="@(() => @TrainingDTO.DateStart)" />
                            </div>
                            <div class="form-group mb-2">
                                <label class="control-label">Duración:</label>
                                <InputNumber class="form-control" @bind-Value="@TrainingDTO.Duration" disabled="@IsReadOnly" />
                                <ValidationMessage For="@(() => TrainingDTO.Duration)" />
                            </div>
                            <div class="form-group mb-2" disabled="@IsReadOnly">
                                <InputCheckbox @bind-Value=@StatusValue disabled="@IsReadOnly"></InputCheckbox> <label class="control-label">Habilitado</label>
                            </div>
                            <div class="form-group mb-2" disabled="@IsReadOnly">
                                <InputCheckbox @bind-Value=@TypeValue disabled="@IsReadOnly"></InputCheckbox> <label class="control-label">Capacitación Interna</label>
                            </div>
                            @if (!TypeValue)
                            {
                                <div class="form-group mb-2 @(!TypeValue? "visible": "invisible")">
                                    <label class="control-label">Entidad:</label>
                                    <InputText class="form-control" @bind-Value="@TrainingDTO.Entity" disabled="@IsReadOnly" />
                                    <ValidationMessage For="@(() => TrainingDTO.Entity)" />
                                </div>
                                <div class="form-group mb-2">
                                    <label class="control-label">Precio:</label>
                                    <InputNumber class="form-control" @bind-Value="@TrainingDTO.Price" disabled="@IsReadOnly" />
                                    <ValidationMessage For="@(() => TrainingDTO.Price)" />
                                </div>
                            }
                        </div>
                        <div class="col-6 p-2">
                            <div class="form-group mb-2">
                                <label class="control-label">Código:</label>
                                <InputText class="form-control" @bind-Value="@TrainingDTO.Cod" disabled="@IsReadOnly" />
                                <ValidationMessage For="@(() => TrainingDTO.Cod)" />
                            </div>
                            <div class="form-group mb-2">
                                <label class="control-label">Descripción:</label>
                                <InputTextArea class="form-control" @bind-Value="@TrainingDTO.Description" disabled="@IsReadOnly" />
                                <ValidationMessage For="@(() => TrainingDTO.Description)" />
                            </div>
                            <div class="form-group mb-2">
                                <label class="control-label">Justificación:</label>
                                <InputTextArea class="form-control" @bind-Value="@TrainingDTO.Requirement" disabled="@IsReadOnly" />
                                <ValidationMessage For="@(() => TrainingDTO.Requirement)" />
                            </div>
                            
                            @if (IsReadOnly)
                            {
                                <div class="form-group mb-2">
                                    <label class="control-label">Observación:</label>
                                    <InputTextArea class="form-control" @bind-Value="@TrainingDTO.Observation" />
                                    <ValidationMessage For="@(() => TrainingDTO.Observation)" />
                                </div>
                            }
                            else
                            {
                                @if (!string.IsNullOrEmpty(TrainingDTO.Observation))
                                {
                                    <div class="form-group mb-2">
                                        <label class="control-label">Observación:</label>
                                        <label class="control-label">@TrainingDTO.Observation</label>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="TrainingTopics" role="tabpanel" aria-labelledby="TrainingTopics-tab">
                    <div class="col-12 p-2">
                        <MultipleSelector NonSelected="nonSelected" Selected="selected" />
                    </div>
                </div>
                <div class="tab-pane fade" id="TrainingImages" role="tabpanel" aria-labelledby="TrainingImages-tab">
                    <div class="col-12 mb-3">
                        @if (TrainingDTO.TrainingImages is not null)
                        {
                            foreach (TrainingImage trainingImage in TrainingDTO.TrainingImages)
                            {
                                <MudImage Src="@trainingImage.Image" Width="200" Height="150" Elevation="25" Class="rounded-lg ma-4" />
                                @* <button type="button" class="btn btn-outline-danger" @onclick="DeleteImageAction"><i class="oi oi-plus" /> eliminar Imágen</button> *@
                            }
                        }
                    </div>
                    <div class="col-6 mb-3">
                        <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                        <button type="button" class="btn btn-outline-primary" @onclick="AddImageAction"><i class="oi oi-plus" /> Agregar Imágen</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary" type="submit">Guardar</button>
        </div>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;

    private List<Company>? companies;
    private List<Process>? processes;
    private List<MultipleSelectorModel> selected { get; set; } = new();
    private List<MultipleSelectorModel> nonSelected { get; set; } = new();

    private string? imageUrl;
    bool TypeValue
    {
        get => Convert.ToBoolean(TrainingDTO.Type);
        set => TrainingDTO.Type = value;
    }
    bool StatusValue
    {
        get => Convert.ToBoolean(TrainingDTO.Status);
        set => TrainingDTO.Status = value;
    }
    [EditorRequired]
    [Parameter]
    public string Titulo { get; set; } = null!;

    [Parameter]
    public bool IsEdit { get; set; } = false;

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public TrainingDTO TrainingDTO { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public List<TrainingStatus>? TrainingStatus { get; set; } = new();

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    public EventCallback AddImageAction { get; set; }

    [Parameter]
    public EventCallback DeleteImageAction { get; set; }
    [Parameter]
    public int IdDeleteImageAction { get; set; }

    [Parameter]
    public EventCallback RemoveImageAction { get; set; }

    [Parameter]
    public List<Topic> SelectedTopics { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<Topic> NonSelectedTopics { get; set; } = new();

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCompaniesAsync();
        if (TrainingDTO!.Process != null)
        {
            await LoadProcessesAsync(TrainingDTO!.Process!.Company!.Id);
        }
        editContext = new(TrainingDTO);
        selected = SelectedTopics.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Description)).ToList();
        nonSelected = NonSelectedTopics.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Description)).ToList();
    }

    private async Task CompanyChangedAsync(ChangeEventArgs e)
    {
        var selectedCompany = Convert.ToInt32(e.Value!);
        processes = null;
        TrainingDTO.ProcessId = 0;
        await LoadProcessesAsync(selectedCompany);
    }

    private async Task LoadCompaniesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Company>>("/api/companies/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        companies = responseHttp.Response;
    }

    private async Task LoadProcessesAsync(int companyId)
    {
        var responseHttp = await repository.GetAsync<List<Process>>($"/api/processes/combo/{companyId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        processes = responseHttp.Response;
    }

    private async Task OnDataAnnotationsValidatedAsync()
    {
        TrainingDTO.TrainingTopicIds = selected.Select(x => int.Parse(x.Key)).ToList();
        await OnValidSubmit.InvokeAsync();
    }

    private void ImageSelected(string imagenBase64)
    {
        if (TrainingDTO.NewTrainingImages is null)
        {
            TrainingDTO.NewTrainingImages = new List<string>();
        }
        TrainingDTO.NewTrainingImages!.Add(imagenBase64);
        imageUrl = string.Empty;
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
