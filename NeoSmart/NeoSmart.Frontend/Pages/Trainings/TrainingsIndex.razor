@page "/trainings"
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Leader,Trainer")]
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<div class="row mb-3">
    <div class="col-7">
        <button class="btn btn-outline-primary float-start me-2" @onclick=@(() => ShowModalAsync())><i class="oi oi-plus"></i> Adicionar</button>
        <h3>Capacitaciones</h3>
    </div>
    <div class="col-5">

        <input style="max-width: 300px;" type="text" class="form-control float-start" id="titulo" placeholder="Buscar capacitación..." @bind-value="Filter" />
        <button type="button" class="btn btn-outline-primary float-end" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
        <button type="button" class="btn btn-outline-danger float-end" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
    </div>
</div>
@if (loading == true)
{
    <Loading />
}
else
{
    <div class="card widget-inline">
        <div class="card-body">
            <GenericList MyList="trainings">
                <NoRecords>
                    <p>Aun no hay Capacitaciones registradas.</p>
                </NoRecords>
                <Body>
                    <table class="table table-responsive">
                        <thead>
                            <tr>
                                <th>Id</th>
                                @* <th>Empresa</th> *@
                                <th>Proceso</th>
                                <th>Capacitación</th>
                                <th>Imagen</th>
                                <th>Duración</th>
                                <th>Interna</th>
                                <th>Temas</th
                                <th>Mediciones</th>
                                <th>Programación</th>
                                <th>Habilitado</th>
                                <th style="width:200px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var training in trainings!)
                            {
                                <tr>
                                    <td>@training.Id</td>
                                    @* <td>@training.Process!.Company!.Name</td> *@
                                    <td>@training.Process!.Description</td>
                                    <td>@training.Description</td>
                                    <td><img src="@training.MainImage" width="70" height="auto"/></td>
                                    <td>@training.Duration</td>
                                    <td><InputCheckbox @bind-Value=training.Type disabled="true"></InputCheckbox></td>
                                    <td>@training.TrainingTopicsNumber</td>
                                    <td>@training.TrainingExamsNumber</td>
                                    <td>@training.SessionNumber</td>
                                    <td><InputCheckbox @bind-Value=training.Status disabled="true"></InputCheckbox></td>
                                    <td>

                                        <a class="btn btn-info btn-sm" href="/TrainingExams/@training.Id"><i class="oi oi-pencil" /> Examen</a>

                                        @* <a class="btn btn-info btn-sm mx-1" href="/Sessions/@training.Id">Agenda</a> *@
                                        <button class="btn btn-success btn-sm mx-1" @onclick=@(() => ShowModalTrainingTopicAsync(training.Id))>Temas</button>
                                        <button class="btn btn-warning btn-sm mx-1" @onclick=@(() => ShowModalAsync(training.Id, true))>Editar</button>
                                        <button class="btn btn-danger btn-sm mx-1" @onclick=@(() => DeleteAsync(training))>Borrar</button>

                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPageAsync" />
                </Body>
            </GenericList>

        </div>
    </div>
}

@code {
    private List<Training>? trainings;
    private int currentPage = 1;
    private int totalPages;
    private bool loading = false;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (!isEdit)
        {
            modalReference = Modal.Show<TrainingCreate>(string.Empty);
        }
        else
        {
            modalReference = Modal.Show<TrainingEdit>(string.Empty, new ModalParameters().Add("TrainingId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task ShowModalTrainingTopicAsync(int id = 0)
    {
        IModalReference modalReference;
        modalReference = Modal.Show<TrainingTopicsIndex>(string.Empty, new ModalParameters().Add("TrainingId", id));

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/trainings/totalPages";
        }
        else
        {
            url = $"api/trainings/totalPages&filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        totalPages = response.Response;
        return true;
    }

    private async Task<bool> LoadListAsync(int page)
    {
        loading = true;
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/trainings/full?page={page}";
        }
        else
        {
            url = $"api/trainings?page={page}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<Training>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return false;
        }

        trainings = response.Response;
        loading = false;
        return true;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task DeleteAsync(Training training)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el capacitación: {training.Description}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"api/trainings/{training.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
