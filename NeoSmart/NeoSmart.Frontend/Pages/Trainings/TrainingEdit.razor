@page "/trainings/edit/{TrainingId:int}"
@attribute [Authorize(Roles = "SuperAdmin,Admin,Leader")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

@if (loading)
{
    <Loading />
}
else
{
    <TrainingForm Titulo="Editar Capacitación" @ref="trainingForm" TrainingDTO="trainingDTO" SelectedTopics="selectedTopics" NonSelectedTopics="nonSelectedTopics" OnValidSubmit="SaveAsync" ReturnAction="Return" IsEdit=true AddImageAction="AddImageAsync" RemoveImageAction="RemoveImageAsyc" />
}

@code {
    private Training? training;
    private TrainingDTO? trainingDTO = new TrainingDTO()
        {
            TrainingTopicIds = new List<int>()
        };

    private TrainingForm? trainingForm;
    private List<Topic> selectedTopics = new();
    private List<Topic> nonSelectedTopics = new();
    private bool loading = true;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int TrainingId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTrainingAsync();
        await LoadTopicsAsync();
    }


    private async Task LoadTrainingAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<Training>($"/api/trainings/{TrainingId}");
        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        training = httpResponse.Response!;
        trainingDTO = ToTrainingDTO(training);
        loading = false;
    }

    private TrainingDTO ToTrainingDTO(Training training)
    {
        return new TrainingDTO
            {
                Id = training.Id,
                ProcessId = training.ProcessId,
                Process = training.Process,
                Description = training.Description,
                Duration = training.Duration,
                Type = training.Type,
                Observation = training.Observation,
                Status = training.Status,
                TrainingTopicIds = training.TrainingTopics!.Select(x => x.TopicId).ToList(),
                TrainingImages = training.TrainingImages,
                ListTrainingImages = training.TrainingImages!.Select(x => x.Image).ToList(), 
            };
    }

    private async Task AddImageAsync()
    {
        if (trainingDTO!.NewTrainingImages is null || trainingDTO.NewTrainingImages.Count == 0)
        {
            return;
        }

        var imageDTO = new ImageDTO
            {
                Id = TrainingId,
                Images = trainingDTO.NewTrainingImages!
            };

        var httpResponse = await repository.PostAsync<ImageDTO, List<TrainingImage>>("/api/trainings/addImages", imageDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        trainingDTO.TrainingImages = httpResponse.Response!;
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Imagenes agregadas con éxito.");
    }

    private async Task RemoveImageAsyc()
    {
        if (trainingDTO.TrainingImages is null || trainingDTO.TrainingImages.Count == 0)
        {
            return;
        }

        // var imageDTO = new ImageDTO
        //     {
        //         ProductId = ProductId,
        //         Images = productDTO.ProductImages!
        //     };

        // var httpResponse = await repository.PostAsync<ImageDTO, ImageDTO>("/api/products/removeLastImage", imageDTO);
        // if (httpResponse.Error)
        // {
        //     var message = await httpResponse.GetErrorMessageAsync();
        //     await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //     return;
        // }

        // productDTO.ProductImages = httpResponse.Response!.Images;
        // var toast = sweetAlertService.Mixin(new SweetAlertOptions
        //     {
        //         Toast = true,
        //         Position = SweetAlertPosition.BottomEnd,
        //         ShowConfirmButton = true,
        //         Timer = 3000
        //     });
        // await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Imagén eliminada con éxito.");
    }

    private async Task LoadTopicsAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<List<Topic>>($"/api/topics/combo/{trainingDTO.Process!.CompanyId}");

        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var topics = httpResponse.Response!;
        foreach (var topic in topics!)
        {
            var found = training!.TrainingTopics!.FirstOrDefault(x => x.TopicId == topic.Id);
            if (found == null)
            {
                nonSelectedTopics.Add(topic);
            } 
            else
            {
                selectedTopics.Add(topic);
            }
        }
        loading = false;
    }

    private async Task SaveAsync()
    {
        trainingDTO.TrainingImages = null;
        var response = await repository.PutAsync($"/api/trainings/full", trainingDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    private void Return()
    {
        trainingForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/trainings");
    }
}