@page "/trainings/create"
@attribute [Authorize(Roles = "SuperAdmin,Admin")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

@if (loading)
{
    <Loading />
}
else
{
    <TrainingForm Titulo="Nueva Capacitación" @ref="trainingForm" TrainingDTO="trainingDTO" SelectedTopics="selectedTopics" NonSelectedTopics="nonSelectedTopics" OnValidSubmit="CreateAsync" ReturnAction="Return" IsEdit=false />
}

@code {
    private TrainingDTO trainingDTO = new()
        {
            ProcessId = 0,
            Type = true,
            DateStart = DateTime.Now,
            Duration = 60,
            TrainingTopicIds = new List<int>(),
            Status = true
        };
    private TrainingForm? trainingForm;
    private List<Topic> selectedTopics = new();
    private List<Topic> nonSelectedTopics = new();
    private bool loading = true;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await LoadTopicsAsync();
    }

    private async Task LoadTopicsAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<List<Topic>>("/api/topics");
        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        nonSelectedTopics = httpResponse.Response!;
        loading = false;
    }

    private async Task CreateAsync()
    {
        var response = await repository.PostAsync("/api/trainings/full", trainingDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito.");
    }

    private void Return()
    {
        trainingForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/trainings");
    }
}
