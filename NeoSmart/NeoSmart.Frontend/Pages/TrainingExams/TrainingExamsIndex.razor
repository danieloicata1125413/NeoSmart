@page "/TrainingExams/{TrainingId:int}"
@attribute [Authorize(Roles = "SuperAdmin,Admin")]
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (Training is null)
{
    <Loading />
}
else
{
    <div class="row mb-3">
        <h3>Tema: @Training.Description</h3>
        <div class="col-7">
            <a class="btn btn-outline-success float-start me-1" href="/Trainings"><i class="oi oi-arrow-thick-left" /> Regresar</a>
            <button class="btn btn-outline-primary float-start me-2" @onclick=@(() => ShowModalAsync())><i class="oi oi-plus"></i> Adicionar</button>
            <h3>Mediciones</h3>
        </div>
        <div class="col-5">
            <input style="max-width: 300px;" type="text" class="form-control float-start" id="titulo" placeholder="Buscar examen..." @bind-value="Filter" />
            <button type="button" class="btn btn-outline-primary float-end" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
            <button type="button" class="btn btn-outline-danger float-end" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
        </div>
    </div>

    <div class="card widget-inline">
        <div class="card-body">
            <GenericList MyList="TrainingExams">
                <NoRecords>
                    <p>Aun no hay mediciones registrados.</p>
                </NoRecords>
                <Body>
                    <table class="table table-responsive">
                        <thead>
                            <tr>
                                <th>Medición</th>
                                <th>Preguntas</th>
                                <th>Habilitado</th>
                                <th style="width:170px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var TrainingExam in TrainingExams!)
                            {
                                <tr>
                                    <td>@TrainingExam.Description</td>
                                    <td>@TrainingExam.TrainingExamQuestionsNumber</td>
                                    <td><InputCheckbox @bind-Value=TrainingExam.Status disabled="true"></InputCheckbox></td>
                                    <td>
                                        <a class="btn btn-info btn-sm" href="/TrainingExamQuestions/@TrainingExam.Id"><i class="oi oi-pencil" /> Preguntas</a>
                                        <button class="btn btn-warning btn-sm" @onclick=@(() => ShowModalAsync(TrainingExam.Id, true))><i class="oi oi-pencil" /> Editar</button>
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(TrainingExam))><i class="oi oi-trash" /> Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPageAsync" />
                </Body>
            </GenericList>

        </div>
    </div>
}

@code {
    private Training? Training;
    private List<TrainingExam>? TrainingExams;
    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    public int TrainingId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (!isEdit)
        {
            modalReference = Modal.Show<TrainingExamCreate>(string.Empty, new ModalParameters().Add("TrainingId", TrainingId));
        }
        else
        {
            modalReference = Modal.Show<TrainingExamEdit>(string.Empty, new ModalParameters().Add("TrainingExamId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }
        var ok = await LoadTrainingAsync();
        if (ok)
        {
            ok = await LoadListAsync(page);
            if (ok)
            {
                await LoadPagesAsync();
            }
        }
    }

    private async Task<bool> LoadPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/TrainingExams/totalPages?id={TrainingId}";
        }
        else
        {
            url = $"api/TrainingExams/totalPages??id={TrainingId}&filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        totalPages = response.Response;
        return true;
    }

    private async Task<bool> LoadListAsync(int page)
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/TrainingExams?id={TrainingId}&page={page}";
        }
        else
        {
            url = $"api/TrainingExams?id={TrainingId}&page={page}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<TrainingExam>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }

        TrainingExams = response.Response;
        return true;
    }

    private async Task<bool> LoadTrainingAsync()
    {
        var response = await repository.GetAsync<Training>($"api/Trainings/{TrainingId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/Trainings");
                return false;
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        Training = response.Response;
        return true;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task DeleteAsync(TrainingExam TrainingExam)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el examen: {TrainingExam.Description}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"api/TrainingExams/{TrainingExam.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}
