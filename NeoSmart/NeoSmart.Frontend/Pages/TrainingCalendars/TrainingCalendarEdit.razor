@page "/TrainingCalendar/edit/{TrainingCalendarId:int}"
@attribute [Authorize(Roles = "Admin,Manager,Leader,Trainer")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<TrainingCalendarForm Titulo="Editar Calendario"
                      @ref="trainingCalendarForm"
                      TrainingCalendar="trainingCalendar"
                      OnValidSubmit="SaveAsync"
                      ReturnAction="Return" />

@code {

    public TrainingSession trainingCalendar;
    public TrainingCalendarForm? trainingCalendarForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int TrainingCalendarId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var httpResponse = await repository.GetAsync<TrainingSession>($"/api/TrainingCalendars/{TrainingCalendarId}");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        trainingCalendar = httpResponse.Response!;
    }

    private async Task SaveAsync()
    {
        trainingCalendar.User = null;
        trainingCalendar.City = null;
        trainingCalendar.Training = null;
        var response = await repository.PutAsync($"/api/TrainingCalendars", trainingCalendar);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    private void Return()
    {
        trainingCalendarForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/TrainingCalendars/details/{trainingCalendar!.TrainingId}");
    }

}