@page "/TrainingSessionInscriptions/ModifyTrainingSessionInscriptionTemporal/{TrainingSessionInscriptionTemporalId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (loading)
{
    <Loading />
}
else
{
    <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col">
                    <a class="btn btn-outline-success float-start me-1" href="/"><i class="oi oi-arrow-thick-left" /> Regresar</a>
                    <h4 class="float-start">@trainingSession!.Training!.Description</h4>
                    </div>
                </div>
            </div>
            <div class="card-body m-2">
            <CarouselView Images="@trainingSession!.Training!.MainImages" />
            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nombre:</label>
                        <div>
                            <b>@trainingSession!.Training!.Description</b>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Descripción:</label>
                        <div>
                            <b>@trainingSession!.Training!.Description</b>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="row">
                            <label>Temas:</label>
                            @foreach (var topic in topics!)
                            {
                                <b>@topic</b>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <EditForm Model="trainingSessionInscriptionTemporalDTO" OnValidSubmit="UpdateCartAsync">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Comentarios:</label>
                            <div>
                                <InputTextArea class="form-control" @bind-Value="@trainingSessionInscriptionTemporalDTO!.Remarks" />
                                <ValidationMessage For="@(() => trainingSessionInscriptionTemporalDTO.Remarks)" />
                            </div>
                        </div>
                        <button class="btn btn-primary" type="submit"><i class="oi oi-check" /> Actualizar Carro</button>
                    </EditForm>
                </div>
            </div>
            
        </div>
    </div>
}

@code {
    private List<string>? topics;
    private List<string>? images;
    private bool loading = true;
    private TrainingSession? trainingSession;
    private bool isAuthenticated;
    private TrainingSessionInscriptionTemporalDTO? trainingSessionInscriptionTemporalDTO;

    [Parameter]
    public int TrainingSessionInscriptionTemporalId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadTrainingSessionInscriptionTemporalAsync();
    }

    private async Task LoadTrainingSessionInscriptionTemporalAsync()
    {
        loading = true;
        var httpResponse = await repository.GetAsync<TrainingSessionInscriptionTemporal>($"/api/TrainingSessionInscriptionTemporals/{TrainingSessionInscriptionTemporalId}");

        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var trainingSessionInscriptionTemporal = httpResponse.Response!;
        trainingSessionInscriptionTemporalDTO = new TrainingSessionInscriptionTemporalDTO
            {
                Id = trainingSessionInscriptionTemporal.Id,
                TrainingSessionId = trainingSessionInscriptionTemporal.TrainingSessionId,
                Remarks = trainingSessionInscriptionTemporal.Remarks!
            };
        trainingSession = trainingSessionInscriptionTemporal.TrainingSession;
        topics = trainingSession!.Training!.TrainingTopics!.Select(x => x.Topic.Description).ToList();
        images = trainingSession!.Training!.TrainingImages!.Select(x => x.Image).ToList();
        loading = false;
    }

    public async Task UpdateCartAsync()
    {
        var httpResponse = await repository.PutAsync("/api/TrainingSessionInscriptionTemporals/full", trainingSessionInscriptionTemporalDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Sesión de Capacitación modificada en el carrito.");
        navigationManager.NavigateTo("/");
    }

}
