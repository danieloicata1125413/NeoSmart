@page "/TrainingExamQuestions/edit/{TrainingExamQuestionId:int}"
@attribute [Authorize(Roles = "SuperAdmin,Admin")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

@if (TrainingExamQuestion is null)
{
    <Loading />
}
else
{
    <TrainingExamQuestionForm Titulo="Editar ExamQuestionen" @ref="TrainingExamQuestionForm" trainingExamQuestion="TrainingExamQuestion" OnValidSubmit="SaveAsync" ReturnAction="Return" />
}

@code {
    private TrainingExamQuestion? TrainingExamQuestion;
    private TrainingExamQuestionForm? TrainingExamQuestionForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int TrainingExamQuestionId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await repository.GetAsync<TrainingExamQuestion>($"/api/TrainingExamQuestions/{TrainingExamQuestionId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        TrainingExamQuestion = response.Response;
    }

    private async Task SaveAsync()
    {
        TrainingExamQuestion!.TrainingExam = null;
        var response = await repository.PutAsync($"/api/TrainingExamQuestions", TrainingExamQuestion);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    private void Return()
    {
        TrainingExamQuestionForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/TrainingExamQuestions/{TrainingExamQuestion.TrainingExamId}");
    }
}