@page "/SessionInscriptions/My"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Leader,Trainer,Employee")]

@if (loading)
{
    <Loading />
}
else
{
    <div class="row mb-3">
        <div class="col-7">
            <h3>Incripciones</h3>
        </div>
        <div class="col-5">
        </div>
    </div>
    <div class="card widget-inline">
        <div class="card-body">
            <GenericList MyList="SessionInscriptions">
                <NoRecords>
                    <p>Aun no hay inscripciones registradas.</p>
                </NoRecords>
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Usuario</th>
                                <th>Capacitación</th>
                                <th>Fecha inicio</th>
                                <th>Fecha fin</th>
                                <th>Capacitador</th>
                                <th>Comentario</th>
                                <th>Estado</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var SessionInscription in SessionInscriptions!)
                            {
                                <tr>
                                    <td>
                                        @($"{SessionInscription.Date:yyyy/MM/dd hh:mm tt}")
                                    </td>
                                    <td>
                                        @SessionInscription.User!.FullName
                                    </td>
                                    <td>
                                        @SessionInscription.Session!.Training!.Description
                                    </td>
                                    <td>
                                        @SessionInscription.Session!.DateStart
                                    </td>
                                    <td>
                                        @if (@SessionInscription.Session!.User != null)
                                        {
                                            @SessionInscription.Session!.User!.FullName
                                        }
                                    </td>
                                    <td>
                                        <label>@SessionInscription.Remarks</label>
                                        @if (SessionInscription.SessionInscriptionAttendsExist == true)
                                        {

                                            <label>Asistencia completada</label>
                                        }
                                    </td>
                                    <td>
                                        @SessionInscription.SessionInscriptionStatus!.Description
                                    </td>
                                    <td>
                                        @if (SessionInscription.Certificate != null)
                                        {
                                            <a class="btn btn-info btn-sm mx-1" href="@SessionInscription.Certificate">Certificado</a>
                                        }
                                        <button @onclick=@(() => ShowModalAsync(SessionInscription.Id)) class="btn btn-info btn-sm"><i class="oi oi-info" /> Detalles</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPageAsync" />
                </Body>
            </GenericList>
        </div>
    </div>
}

@code {
    private int currentPage = 1;
    private int totalPages;
    private bool loading = true;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    public List<SessionInscription>? SessionInscriptions { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task<bool> LoadListAsync(int page)
    {
        loading = true;
        var url = $"api/SessionInscriptions/My?page={page}";
        var response = await repository.GetAsync<List<SessionInscription>>(url);
        if (response.Error)
        {
            loading = false;
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        SessionInscriptions = response.Response;
        loading = false;
        return true;
    }

    private async Task LoadPagesAsync()
    {
        loading = true;
        var url = $"api/SessionInscriptions/mytotalPages";
        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            loading = false;
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
        loading = false;
    }

    private async Task ShowModalAsync(int id = 0)
    {
        IModalReference modalReference;
        modalReference = Modal.Show<SessionInscriptionDetails>(string.Empty, new ModalParameters().Add("SessionInscriptionId", id));

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
}