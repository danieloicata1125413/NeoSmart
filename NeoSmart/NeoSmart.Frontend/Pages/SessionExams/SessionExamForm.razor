@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

@if (loading)
{
    <Loading />
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col">
                        <h4 class="float-start">@Titulo</h4>
                        <button class="btn btn-danger float-end me-1" @onclick="ReturnAction"><i class="oi oi-ban" /> Cerrar</button>
                    </div>
                </div>
            </div>
            <div class="card-body m-2">
                <div class="row">
                    <div class="col-12 p-2">
                        <div class="form-group mb-2">
                            <label>Medición:</label>
                            <select class="form-select" @bind="SessionExam.TrainingExamId">
                                <option value="0">-- Seleccione una medición --</option>
                                @if (trainingExams is not null)
                                {
                                    @foreach (var trainingExam in trainingExams)
                                    {
                                        if (SessionExam.TrainingExam is not null)
                                        {
                                            <option value="@trainingExam.Id" selected="@(trainingExam.Id == SessionExam.TrainingExam!.Id)">@trainingExam.Description</option>
                                        }
                                        else
                                        {
                                            <option value="@trainingExam.Id">@trainingExam.Description</option>
                                        }
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => SessionExam.TrainingExamId)" />
                        </div>
                        <div class="form-group mb-2">
                            <label>Fecha inicio:</label>
                            <InputDate Type="InputDateType.Date" class="form-control float-end" @bind-Value="@SessionExam.DateStart"/>
                            <ValidationMessage For="@(() => @SessionExam.DateStart)" />
                        </div>
                        <div class="form-group mb-2">
                            <label>Fecha fin:</label>
                            <InputDate Type="InputDateType.Date" class="form-control float-end" @bind-Value="@SessionExam.DateEnd" />
                            <ValidationMessage For="@(() => @SessionExam.DateEnd)" />
                        </div>
                        @* <div class="form-group mb-2">
                            <label>Hora inicio:</label>
                            <InputDate Type="InputDateType.Time" class="form-control float-end" @bind-Value="@SessionExam.TimeStart" />
                            <ValidationMessage For="@(() => @SessionExam.TimeStart)" />
                        </div>
                        <div class="form-group mb-2">
                            <label>Hora fin:</label>
                            <InputDate Type="InputDateType.Time" class="form-control float-end" @bind-Value="@SessionExam.TimeEnd" />
                            <ValidationMessage For="@(() => @SessionExam.TimeEnd)" />
                        </div> *@
                        <div class="form-group mb-2">
                            <label class="control-label">Intentos:</label>
                            <InputNumber class="form-control" @bind-Value="@SessionExam.Attempt" />
                            <ValidationMessage For="@(() => SessionExam.Attempt)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" type="submit">Guardar</button>
            </div>
        </div>
    </EditForm>
}

@code {
    private Session? Session { get; set; }
    private EditContext editContext = null!;
    private List<TrainingExam>? trainingExams;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        SessionExam.SessionId = SessionId;
        await LoadSessionAsync();
        editContext = new(SessionExam);
    }

    private async Task LoadSessionAsync()
    {
        var responseHttp = await repository.GetAsync<Session>($"/api/Sessions/{SessionId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Session = responseHttp.Response;
        await LoadTrainingExamsAsync(Session!.TrainingId);
    }

    private async Task LoadTrainingExamsAsync(int TrainingId)
    {
        var responseHttp = await repository.GetAsync<List<TrainingExam>>($"/api/TrainingExams/combo/{TrainingId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        trainingExams = responseHttp.Response;
    }

    [EditorRequired]
    [Parameter]
    public string Titulo { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public int SessionId { get; set; }

    [EditorRequired]
    [Parameter]
    public SessionExamDTO SessionExam { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
