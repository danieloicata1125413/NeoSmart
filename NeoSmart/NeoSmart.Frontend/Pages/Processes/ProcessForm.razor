@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>


<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col">
                    <h4 class="float-start">@Titulo</h4>
                    <button class="btn btn-danger float-end me-1" @onclick="ReturnAction"><i class="oi oi-ban" /> Cerrar</button>
                </div>
            </div>
        </div>
        <div class="card-body m-2">
            <div class="mb-3">
                <div class="form-group mb-2">
                    <label class="control-label">Descripción:</label>
                    <InputTextArea class="form-control" @bind-Value="@Process.Description" />
                    <ValidationMessage For="@(() => Process.Description)" />
                </div>
                <div class="col-6 p-2">
                    <div class="form-group mb-2">
                        <label>Empresa:</label>
                        <select class="form-select" @bind="Process.CompanyId">
                            <option value="0">-- Seleccione una empresa --</option>
                            @if (companies is not null)
                            {
                                @foreach (var company in companies)
                                {
                                    if (Process.CompanyId != 0)
                                    {
                                        <option value="@company.Id" selected="@(company.Id == Process.Company!.Id)">@company.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@company.Id">@company.Name</option>
                                    }
                                }
                            }
                        </select>
                        <ValidationMessage For="@(() => Process.CompanyId)" />
                    </div>
                </div>
                <InputCheckbox @bind-Value=@StatusValue></InputCheckbox> <label class="control-label">Habilitado</label>
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary" type="submit">Guardar</button>
        </div>
    </div>
</EditForm>

@code {

    private EditContext editContext = null!;

    private List<Company>? companies;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompaniesAsync();
        editContext = new(Process);
    }

    [EditorRequired]
    [Parameter]
    public string Titulo { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Process Process { get; set; } = null!;

    bool StatusValue
    {
        get => Convert.ToBoolean(Process.Status);
        set => Process.Status = value;
    }

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    private async Task LoadCompaniesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Company>>("/api/companies/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        companies = responseHttp.Response;
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
