@page "/processes/create"
@attribute [Authorize(Roles = "SuperAdmin,Admin")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<ProcessForm Titulo="Nuevo Proceso" @ref="processForm" Process="process" OnValidSubmit="CreateAsync" ReturnAction="Return" />


@code {
    private Process process = new() { 
            Status = true
        };
    private ProcessForm? processForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task CreateAsync()
    {
        var response = await repository.PostAsync("/api/processes", process);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito.");
    }

    private void Return()
    {
        processForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/processes");
    }
}
