@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

@if (loading)
{
    <Loading />
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col">
                        <h4 class="float-start">@Titulo</h4>
                        <button class="btn btn-danger float-end me-1" @onclick="ReturnAction"><i class="oi oi-ban" /> Cerrar</button>
                    </div>
                </div>
            </div>
            <div class="card-body m-2">
                <div class="row">
                    <div class="col-6 p-2">
                        <div class="form-group mb-2">
                            <label class="control-label">Nit:</label>
                            <InputText class="form-control" @bind-Value="@Company.Nit" />
                            <ValidationMessage For="@(() => Company.Nit)" />
                        </div>
                        <div class="form-group mb-2">
                            <label class="control-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="@Company.Name" />
                            <ValidationMessage For="@(() => Company.Name)" />
                        </div>
                        <InputCheckbox @bind-Value=@StatusValue></InputCheckbox> <label class="control-label">Habilitado</label>
                    </div>
                    <div class="col-6">
                        <div class="mb-3">
                            <label>País:</label>
                            <div>
                                <select class="form-select" @onchange="CountryChangedAsync">
                                    <option value="0">-- Seleccione un país --</option>
                                    @if (countries is not null)
                                    {
                                        @foreach (var country in countries)
                                        {
                                            @if (Company.City is not null)
                                            {
                                                <option value="@country.Id" selected="@(country.Id == Company.City!.State!.Country!.Id)">@country.Name</option>
                                            }
                                            else{
                                                <option value="@country.Id">@country.Name</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                           <div class="mb-3">
                            <label>Estado/Departamento:</label>
                            <div>
                                <select class="form-select" @onchange="StateChangedAsync">
                                    <option value="0">-- Seleccione un estado/departamento --</option>
                                    @if (states is not null)
                                    {
                                        @foreach (var state in states)
                                        {
                                            @if (Company.City is not null)
                                            {
                                                <option value="@state.Id" selected="@(state.Id == Company.City!.State!.Id)">@state.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@state.Id">@state.Name</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Ciudad:</label>
                            <div>
                                <select class="form-select" @bind="Company.CityId">
                                    <option value="0">-- Seleccione una ciudad --</option>
                                    @if (cities is not null)
                                    {
                                        @foreach (var city in cities)
                                        {
                                            @if (Company.City is not null)
                                            {
                                                <option value="@city.Id" selected="@(city.Id == Company.City!.Id)">@city.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@city.Id">@city.Name</option>
                                            }
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => Company.CityId)" />
                            </div>
                    </div>
                       
                    </div> 
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" type="submit">Guardar</button>
            </div>
        </div>
    </EditForm>
}

@code {
    private EditContext editContext = null!;
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;
    private bool loading;

    bool StatusValue
    {
        get => Convert.ToBoolean(Company.Status);
        set => Company.Status = value;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCountriesAsync();
        if (Company!.City != null)
        {
            await LoadStatesAsyn(Company!.City!.State!.Country!.Id);
            await LoadCitiesAsyn(Company!.City!.State!.Id);
        }
        editContext = new(Company);
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        states = null;
        cities = null;
        Company.CityId = 0;
        await LoadStatesAsyn(selectedCountry);
    }

    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        cities = null;
        Company.CityId = 0;
        await LoadCitiesAsyn(selectedState);
    }

    private async Task LoadCountriesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Country>>("/api/countries/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
    }

    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.GetAsync<List<State>>($"/api/states/combo/{countryId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
    }

    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.GetAsync<List<City>>($"/api/cities/combo/{stateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;
    }

    [EditorRequired]
    [Parameter]
    public string Titulo { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Company Company { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
