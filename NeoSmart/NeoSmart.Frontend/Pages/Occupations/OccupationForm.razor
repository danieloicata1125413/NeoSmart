@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

@if (loading)
{
    <Loading />
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <div class="col">
                        <h4 class="float-start">@Titulo</h4>
                        <button class="btn btn-danger float-end me-1" @onclick="ReturnAction"><i class="oi oi-ban" /> Cerrar</button>
                    </div>
                </div>
            </div>
            <div class="card-body m-2">
                <div class="row">
                    <div class="col-6 p-2">
                        <div class="form-group mb-2">
                            <label class="control-label">Descripción:</label>
                            <InputTextArea class="form-control" @bind-Value="@Occupation.Description" />
                            <ValidationMessage For="@(() => Occupation.Description)" />
                        </div>
                        <InputCheckbox @bind-Value=@StatusValue></InputCheckbox> <label class="control-label">Habilitado</label>
                    </div>
                    <div class="col-6 p-2">
                        <div class="form-group mb-2">
                            <label>Empresa:</label>
                            <select class="form-select" @onchange="CompanyChangedAsync">
                                <option value="0">-- Seleccione una empresa --</option>
                                @if (companies is not null)
                                {
                                    @foreach (var company in companies)
                                    {
                                        if (Occupation.Process is not null)
                                        {
                                            <option value="@company.Id" selected="@(company.Id == Occupation.Process!.Company!.Id)">@company.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@company.Id">@company.Name</option>
                                        }
                                    }
                                }
                            </select>
                        </div>
                        <div class="form-group mb-2">
                            <label>Proceso:</label>
                            <select class="form-select" @bind="Occupation.ProcessId">
                                <option value="0">-- Seleccione un proceso --</option>
                                @if (processes is not null)
                                {
                                    @foreach (var process in processes)
                                    {
                                        if (Occupation.Process is not null)
                                        {
                                            <option value="@process.Id" selected="@(process.Id == Occupation.Process!.Id)">@process.Description</option>
                                        }
                                        else
                                        {
                                            <option value="@process.Id">@process.Description</option>
                                        }
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => Occupation.ProcessId)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" type="submit">Guardar</button>
            </div>
        </div>
    </EditForm>
}

@code {
    private EditContext editContext = null!;
    private List<Company>? companies;
    private List<Process>? processes;
    private bool loading;

    bool StatusValue
    {
        get => Convert.ToBoolean(Occupation.Status);
        set => Occupation.Status = value;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCompaniesAsync();
        if (Occupation!.Process != null)
        {
            await LoadProcessesAsync(Occupation!.Process!.Company!.Id);
        }
        editContext = new(Occupation);
    }

    private async Task CompanyChangedAsync(ChangeEventArgs e)
    {
        var selectedCompany = Convert.ToInt32(e.Value!);
        processes = null;
        Occupation.ProcessId = 0;
        await LoadProcessesAsync(selectedCompany);
    }

    private async Task LoadCompaniesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Company>>("/api/companies/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        companies = responseHttp.Response;
    }

    private async Task LoadProcessesAsync(int companyId)
    {
        var responseHttp = await repository.GetAsync<List<Process>>($"/api/processes/combo/{companyId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        processes = responseHttp.Response;
    }

    [EditorRequired]
    [Parameter]
    public string Titulo { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Occupation Occupation { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
